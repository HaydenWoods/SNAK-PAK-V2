// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: View.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from View.proto</summary>
public static partial class ViewReflection {

  #region Descriptor
  /// <summary>File descriptor for View.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ViewReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpWaWV3LnByb3RvInYKBFZpZXcSEAoIdmlld05hbWUYASABKAkSFwoIc3Vi",
          "dmlld3MYAiADKAsyBS5WaWV3EiEKCWNvbXB1dGVycxgDIAMoCzIOLlZpZXcu",
          "Q29tcHV0ZXIaIAoIQ29tcHV0ZXISFAoMY29tcHV0ZXJOYW1lGAEgASgJYgZw",
          "cm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::View), global::View.Parser, new[]{ "ViewName", "Subviews", "Computers" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::View.Types.Computer), global::View.Types.Computer.Parser, new[]{ "ComputerName" }, null, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class View : pb::IMessage<View> {
  private static readonly pb::MessageParser<View> _parser = new pb::MessageParser<View>(() => new View());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<View> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ViewReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public View() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public View(View other) : this() {
    viewName_ = other.viewName_;
    subviews_ = other.subviews_.Clone();
    computers_ = other.computers_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public View Clone() {
    return new View(this);
  }

  /// <summary>Field number for the "viewName" field.</summary>
  public const int ViewNameFieldNumber = 1;
  private string viewName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ViewName {
    get { return viewName_; }
    set {
      viewName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "subviews" field.</summary>
  public const int SubviewsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::View> _repeated_subviews_codec
      = pb::FieldCodec.ForMessage(18, global::View.Parser);
  private readonly pbc::RepeatedField<global::View> subviews_ = new pbc::RepeatedField<global::View>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::View> Subviews {
    get { return subviews_; }
  }

  /// <summary>Field number for the "computers" field.</summary>
  public const int ComputersFieldNumber = 3;
  private static readonly pb::FieldCodec<global::View.Types.Computer> _repeated_computers_codec
      = pb::FieldCodec.ForMessage(26, global::View.Types.Computer.Parser);
  private readonly pbc::RepeatedField<global::View.Types.Computer> computers_ = new pbc::RepeatedField<global::View.Types.Computer>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::View.Types.Computer> Computers {
    get { return computers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as View);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(View other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ViewName != other.ViewName) return false;
    if(!subviews_.Equals(other.subviews_)) return false;
    if(!computers_.Equals(other.computers_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ViewName.Length != 0) hash ^= ViewName.GetHashCode();
    hash ^= subviews_.GetHashCode();
    hash ^= computers_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ViewName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ViewName);
    }
    subviews_.WriteTo(output, _repeated_subviews_codec);
    computers_.WriteTo(output, _repeated_computers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ViewName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewName);
    }
    size += subviews_.CalculateSize(_repeated_subviews_codec);
    size += computers_.CalculateSize(_repeated_computers_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(View other) {
    if (other == null) {
      return;
    }
    if (other.ViewName.Length != 0) {
      ViewName = other.ViewName;
    }
    subviews_.Add(other.subviews_);
    computers_.Add(other.computers_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ViewName = input.ReadString();
          break;
        }
        case 18: {
          subviews_.AddEntriesFrom(input, _repeated_subviews_codec);
          break;
        }
        case 26: {
          computers_.AddEntriesFrom(input, _repeated_computers_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the View message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Computer : pb::IMessage<Computer> {
      private static readonly pb::MessageParser<Computer> _parser = new pb::MessageParser<Computer>(() => new Computer());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Computer> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::View.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Computer() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Computer(Computer other) : this() {
        computerName_ = other.computerName_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Computer Clone() {
        return new Computer(this);
      }

      /// <summary>Field number for the "computerName" field.</summary>
      public const int ComputerNameFieldNumber = 1;
      private string computerName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string ComputerName {
        get { return computerName_; }
        set {
          computerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Computer);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Computer other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (ComputerName != other.ComputerName) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (ComputerName.Length != 0) hash ^= ComputerName.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (ComputerName.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(ComputerName);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (ComputerName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(ComputerName);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Computer other) {
        if (other == null) {
          return;
        }
        if (other.ComputerName.Length != 0) {
          ComputerName = other.ComputerName;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              ComputerName = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
